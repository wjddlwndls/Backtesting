'''Modules for tradingList of modules - '''# import pandas as pdimport datetime as dtimport sys# =============================================================================# !!!ACCOUNT CLASS# =============================================================================class account:    '''    class for account    매수 : 예수금 * 비율 기준으로 매수할 주식 수 계산    매도 : 매수금액 * 비율 기준으로 매도할 주식 수 계산    RoR : 매수금 기준 수익률 (보통의 정의) / 전체 수익률을 예수금을 포함하면 됨    '''    def __init__(self, pf_cls, amount=1):        '''        Init. class        Args:            - pf_cls : portfolio class            - amount : initial cash        '''        # DUPLICATE (portfolio)        self._pf = pf_cls            # INIT. BALANCE CLASS        self._init_bal()                # INIT. TRANSACTION HISTORY        self.tx = {}                # INIT. ITEMS        self._cash = amount        self._amnt = 0         self._valu = 0        self._PanL = 0        self._RoR  = 0                    '''        계좌 총 예수금    '''    @property    def cash(self):        return self._cash    @cash.setter    def cash(self, val):        self._cash = val                    '''        계좌 총 매입금    '''    @property    def amnt(self):        self._amnt = 0        for stag in self._pf.tag:            self._amnt += getattr(self, stag).amnt        return self._amnt            '''    계좌 총 평가금    '''    @property    def valu(self):        self._valu = 0        for stag in self._pf.tag:            self._valu += getattr(self, stag).valu        return self._valu    '''    계좌 총 손익    '''            @property    def PanL(self):        self._PanL = 0        for stag in self._pf.tag:            self._PanL += getattr(self, stag).PanL        return self._PanL    '''    계좌 총 수익율 [총 매입금액 기준]    '''        @property    def RoR(self):        self._RoR = 0        if self.amnt > 0:            # Rate of Return (in %)            self._RoR = self.PanL / self.amnt * 100        return self._RoR        '''    계좌 보유 자산 비율 [각 자산별 현재 할당 비]    '''    @property    def aloc(self) -> dict:        res = {}        for stag in self._pf.tag:            res[stag] = getattr(self, stag).amnt / (self.amnt + self.cash)        return res            '''    각 자산별 (매수가능) 잔여 현금    '''    @property    def fcsh(self) -> dict:        # Current allocation        aloc = self.aloc                # Get free cash        res = {}        for stag in self._pf.tag:            # Get free 'amax' (allowable maximum allocation)            famx = self._pf.aloc[stag]['amax'] - aloc[stag]                        # Get allocated cash for buying            acsh = famx * (self.amnt + self.cash)                        # Get minimum value as free cash            res[stag] = min(acsh, self.cash)        return res    '''    각 자산별 (매도가능) 잔여 수량    '''    @property    def famt(self) -> dict:        # Current allocation        aloc = self.aloc                # Get free amount to sell        res = {}        for stag in self._pf.tag:                        # 최소 요구 할당 비 확인            if aloc[stag] <= self._pf.aloc[stag]['rmin']:                # No amount to sell                amnt_sel = 0                            elif aloc[stag] > self._pf.aloc[stag]['rmin']:                # Get minimum amount to hold                amnt_hld = self._pf.aloc[stag]['rmin'] * (self.amnt + self.cash)                                # Get amount to sell                amnt_sel = getattr(self, stag).amnt - amnt_hld                            res[stag] = amnt_sel                    return res                    # INIT. BALANCE CLASS    def _init_bal(self):        '''        Init. balance sub-class        '''        for stag in self._pf.tag:            # Set balance sub-class            setattr(self, stag, balance())                        # BUY BY AMOUNT    def buy_amnt(self, stag, pric, amtr):        '''        Buy stock by amount ratio        Args            - stag  : stock tag            - pric  : buy price            - amtr  : amount ratio to buy w.r.t total cap.                    : total cap. = self.amnt(계좌 매입금) + self.cash(계좌 현금)                                        : strategy option 에 따라 amtr 이 변경됨 (함수 입력 전 or 후?)                    : scaling off -> amtr = amtr                    : scaling on  -> amtr = amtr * amax        '''        # Amount of 'unit' [1유닛 매입금]        amnt_unit = (self.amnt + self.cash) * amtr                # Amount to buy        # 잔여 현금(fcsh)이 유닛 매입금 보다 적을 시, 잔여 현금 전량 매수        amnt2buy = min(self.fcsh[stag], amnt_unit)                # For 'amnt' input for amount itself [정액거래]        if amtr > 1:            amnt2buy = min(self.fcsh[stag], amtr)                # Number of shares to buy from amount & price        shar = amnt2buy/pric                # Buy shares by amount        self.buy_shar(stag, shar, pric)                        # SELL BY AMOUNT    def sel_amnt(self, stag, pric, amtr):        # Amount of 'unit' [1유닛 매도 수량]        amnt_unit = (self.amnt + self.cash) * amtr                # Amount to sell        # 자산 잔고가 1유닛 수량보다 적을 시, 잔여 잔고 전량 매도        amnt2sel = min(self.famt[stag], amnt_unit)                # For 'amnt' input for amount itself [정액거래]        if amtr > 1:            amnt2sel = min(self.famt[stag], amtr)                    # Number of shares to sell from amount & price        shar = amnt2sel/getattr(self, stag).Pavg                # Sel shares by amount        self.sel_shar(stag, shar, pric)                            # BUY SHARES    def buy_shar(self, stag, shar, pric):        '''        Buy & update balance        '''        # Get balance sub-class        bal = getattr(self, stag)                # Add share        bal.shar += shar                # Evaluate Pavg        # shar   pavg   amnt        # n1      p1     p1*n1        # n2      p2     p2*n2        # pavg = p1*n1 + p2*n2 / (n1 + n2)        # p1*n1 -> self.amnt((n1+n2)*p1) - shar(n2) * self.Pavg(p1)        # p2*n2 -> shar(n2) * pric(p2)        # pavg = (self.amnt - shar * self.Pavg + shar * pric) / self.shar        bal.Pavg = (bal.amnt + shar * (pric - bal.Pavg)) / bal.shar                # Withdraw cash        # fee = 0.0025    # 해외        # fee = 0.00015   # 국내 매수        fee = 0        self.cash -= ((shar * pric) * (1 + fee))                # Check cash truncation error        if abs(self.cash) < 1.0e-9:            self.cash = 0                # Write TX history        self._write_tx_his_buy(stag, shar, pric, shar*pric)                            # SEL SHARES    def sel_shar(self, stag, shar, pric):        '''        Sell & update balance        '''        # Get balance sub-class        bal = getattr(self, stag)                # Remove shares        bal.shar -= shar                # Check shares truncation error        if abs(bal.shar) < 1.0e-9:            bal.shar = 0                    # Add cash        # fee = 0.0025    # 해외        # fee = 0.00165   # 국내매도        fee = 0        self.cash += ((shar * pric) * (1-fee))                # Write TX history        self._write_tx_his_sel(stag, shar, pric, shar * pric)                        # WRITE TRANSACTION HISTORY    def _write_tx_his_buy(self, stag, shares, price, amount):        self.tx[stag] = {                       'shar': +shares,                       'pric': price,                       'Pavg': getattr(self, stag).Pavg,                       'amnt': -amount,                       'PanL': 0,                       'RoR' : 0,                       }    def _write_tx_his_sel(self, stag, shares, price, amount):        self.tx[stag] = {                       'shar': -shares,                       'pric': price,                       'Pavg': getattr(self, stag).Pavg,                       'amnt': +amount,                       'PanL': (price - getattr(self, stag).Pavg) * shares,                       'RoR' : (price - getattr(self, stag).Pavg) * shares / amount * 100,                       }            # =============================================================================        # !!!BALANCE CLASS# Stock balance & valuation# =============================================================================class balance:    '''    주식거래의 기본은 주식 수량 & 가격 이므로,    여기에서는 모든 거래를 주식 수량을 기준으로 함.    RoR : 매수금(amnt)기준 수익률    '''    def __init__(self, shar=0, Pavg=0):        # Trading        self._shar = shar        self._Pavg = Pavg        self._amnt = shar * Pavg        # Valuation        self._valu = 0        self._PanL = 0        self._RoR  = 0                # Base price for portfolio valuation        self._pric = 0                # SET BASE PRICE FOR PORTFOLIO VALUATION    def set_pric(self, val):        self._pric = val                            @property    def shar(self):        return self._shar    @shar.setter    def shar(self, val):        self._shar = val    @property    def Pavg(self):        # self.Pavg = self.amnt / self.shar        return self._Pavg    @Pavg.setter    def Pavg(self, val):        self._Pavg = val            @property    def amnt(self):        self._amnt = self._shar * self._Pavg        return self._amnt        # PROPERTIES FOR VALUATION    # valu, PanL, RoR    @property    def pric(self):        return self._pric        @property    def valu(self):        self._valu = (self.shar * self.pric)        return self._valu        @property    def PanL(self):        self._PanL = self.valu - self.amnt        return self._PanL        @property    def RoR(self):        self._RoR = 0 * self.pric        if self.amnt > 0:            # Rate of Return (in %)            self._RoR = self.PanL / self.amnt * 100        return self._RoR# =============================================================================        # TRADING DAY INFO CLASS# =============================================================================    class trday_info:    def __init__(                self,                pf_cls,                BOD = dt.date.today().strftime('%Y-%m-%d'),                EOD = dt.date.today().strftime('%Y-%m-%d'),                ):                # Get minimum common BOD in stocks        BOD_min = ''        for tag in pf_cls.tag:            # Current BOD            iBOD = getattr(pf_cls, tag).df.index[0].strftime('%Y-%m-%d')            # Check            if BOD_min < iBOD:                BOD_min =  iBOD                                # Check BOD        if BOD < BOD_min:            sys.exit(f'Too early input BOD. Minimum BOD is {BOD_min}')                        # Truncate trading date        for tag in pf_cls.tag:            df = getattr(pf_cls, tag).df            df = df.iloc[df.index.get_loc(BOD) : df.index.get_loc(EOD)+1]                # Update property        self._days = df.index.to_list()        self._BOD = BOD        self._EOD = EOD            @property    # BEGINNING OF DAY    def BOD(self):        return self._BOD    @property    # END OF DAY    def EOD(self):        return self._EOD        @property    # TRADING DAYS    def days(self):        return self._days